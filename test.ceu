#ifndef TEST_BEHAVIOR_TREE
#define TEST_BEHAVIOR_TREE

native _x();
native _y();
native _move_x();
native _move_y();
native _cancel_x();
native _cancel_y();
native _assert();

input void START;
input void X_DONE;
input void Y_DONE;
input void TICK;

interface Executor with
  event void ok;
end

class MoveX with
  interface Executor;
  var int distance;
do
  _printf("move x %d starting\n", this.distance);
  _move_x(this.distance);
  await X_DONE;
  _printf("move x %d done\n", this.distance);
  emit this.ok;
end

class MoveY with
  interface Executor;
  var int distance;
do
  _printf("move y %d starting\n", this.distance);
  _move_y(this.distance);
  await Y_DONE;
  _printf("move y %d done\n", this.distance);
  emit this.ok;
end

class BoxTest with
  interface Executor;
do
  _printf("boxtest starting\n");
  var MoveX right with
    this.distance = 10;
  end;
  await right.ok;
  var MoveY down with
    this.distance = 10;
  end;
  await down.ok;
  var MoveX left with
    this.distance = -10;
  end;
  await left.ok;
  var MoveY up with
    this.distance = -10;
  end;
  await up.ok;
  _printf("boxtest done\n");
  emit this.ok;
end;

class DiagonalTest with
  interface Executor;
do
  _printf("diagonaltest starting\n");
  par/and do
    var MoveX right with
      this.distance = 20;
    end;
    await right.ok;
  with
    var MoveY down with
      this.distance = 20;
    end;
    await down.ok;
  end
  par/and do
    var MoveX left with
      this.distance = -20;
    end;
    await left.ok;
  with
    var MoveY up with
      this.distance = -20;
    end;
    await up.ok;
  end
  _printf("diagonaltest done\n");
  emit this.ok;
end

class RulesTest with
  interface Executor;
do
  _printf("rulestest starting\n");
  loop do
    if _x() < 30 then
      _printf("rulestest starting right\n");
      var MoveX right with
        this.distance = 30 - _x();
      end;
      finalize with
        _cancel_x(); // TODO: call right.cancel?
      end
      
      par/or do
        every TICK do
          if _x() >= 30 then
            _printf("right disqualified\n");
            break;
          end
        end
      with
        await right.ok;
      end
    else
      par/or do
        every TICK do
          if _x() < 30 then
            _printf("right preempts\n");
            break;
          end
        end
      with
        if _x() > 30 then
          _printf("rulestest starting left\n");
          var MoveX left with
            this.distance = 30 - _x();
          end;
          finalize with
            _cancel_x(); // TODO: call left.cancel?
          end

          par/or do
            every TICK do
              if _x() <= 30 then
                _printf("left disqualified\n");
                break;
              end
            end
          with
            await left.ok;
          end
        else
          par/or do
            every TICK do
              if _x() > 30 then
                _printf("left preempts\n");
                break;
              end
            end
          with
            if _y() < 30 then
              _printf("rulestest starting down\n");
              var MoveY down with
                this.distance = 30 - _y();
              end;
              finalize with
                _cancel_y();
              end
              par/or do
                every TICK do
                  if _y() >= 30 then
                    _printf("down disqualified\n");
                    break;
                  end
                end
              with
                await down.ok;
              end
            else
              par/or do
                every TICK do
                  if _y() < 30 then
                    _printf("down preempts\n");
                    break;
                  end
                end
              with
                if _y() > 30 then
                  _printf("rulestest starting up\n");
                  var MoveY up with
                    this.distance = 30 - _y();
                  end;
                  finalize with
                    _cancel_y();
                  end
                  par/or do
                    every TICK do
                      if _y() <= 30 then
                        _printf("up disqualified\n");
                        break;
                      end
                    end
                  with
                    await up.ok;
                  end
                else
                  break;
                end
              end
            end
          end
        end
      end
    end
  end
  _assert(_x() == 30);
  _assert(_y() == 30);
  _printf("rulestest done\n");
  emit this.ok;
end


await START;
// var BoxTest to_test;
// var DiagonalTest to_test;
var RulesTest to_test;
await to_test.ok;

escape 0;

#endif

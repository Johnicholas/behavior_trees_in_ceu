#ifndef TEST_BEHAVIOR_TREE
#define TEST_BEHAVIOR_TREE

native _x();
native _y();
native _move_x();
native _move_y();
native _cancel_x();
native _cancel_y();
native _assert();

input void START;
input void X_DONE;
input void Y_DONE;
input void TICK;

interface Executor with
  event void ok;
end

class MoveX with
  interface Executor;
  var int distance;
do
  var bool cancel = true;
  finalize with
    if cancel then
      _printf("move x %d canceled\n", this.distance);
      _cancel_x();
    end
  end;
  _printf("move x %d starting\n", this.distance);
  _move_x(this.distance);
  await X_DONE;
  _printf("move x %d done\n", this.distance);
  cancel = false;
  emit this.ok;
end

class MoveY with
  interface Executor;
  var int distance;
do
  var bool cancel = true;
  finalize with
    if cancel then
      _printf("move y %d canceled\n", this.distance);
      _cancel_y();
    end
  end;
  _printf("move y %d starting\n", this.distance);
  _move_y(this.distance);
  await Y_DONE;
  _printf("move y %d done\n", this.distance);
  cancel = false;
  emit this.ok;
end

class BoxTest with
  interface Executor;
do
  _printf("boxtest starting\n");
  var MoveX right with
    this.distance = 10;
  end;
  await right.ok;
  var MoveY down with
    this.distance = 10;
  end;
  await down.ok;
  var MoveX left with
    this.distance = -10;
  end;
  await left.ok;
  var MoveY up with
    this.distance = -10;
  end;
  await up.ok;
  _printf("boxtest done\n");
  emit this.ok;
end;

class DiagonalTest with
  interface Executor;
do
  _printf("diagonaltest starting\n");
  par/and do
    var MoveX right with
      this.distance = 20;
    end;
    await right.ok;
  with
    var MoveY down with
      this.distance = 20;
    end;
    await down.ok;
  end
  par/and do
    var MoveX left with
      this.distance = -20;
    end;
    await left.ok;
  with
    var MoveY up with
      this.distance = -20;
    end;
    await up.ok;
  end
  _printf("diagonaltest done\n");
  emit this.ok;
end

class Halfplane with
  interface Executor;
  var int xcoeff;
  var int ycoeff;
  var int offset;
do
  every TICK do
    if _x() * this.xcoeff + _y() * this.ycoeff < offset then
      emit this.ok;
    end
  end
end

class Skip with
  interface Executor;
do
  emit this.ok;
end

class Quux with
  interface Executor;
do
  if _y() > 30 then
    par/or do
      _printf("Quux starting up\n");
      var MoveY up with
        this.distance = _y() - 30;
      end;
      await up.ok;
      _printf("Quux done up\n");
    with
      var Halfplane guard with
        this.xcoeff = 0;
        this.ycoeff = 1;
        this.offset = 31;
      end;
      await guard.ok;
      _printf("Quux up disqualified\n");
    end
  else
    par/or do
      var Halfplane guard with
        this.xcoeff = 0;
        this.ycoeff = 1;
        this.offset = 30;
      end;
      await guard.ok;
      _printf("Quux up preempts\n");
    with
      var Skip default;
      await default.ok;
    end
  end
  emit this.ok;
end

class Qux with
  interface Executor;
do
  if _y() < 30 then
    par/or do
      _printf("Qux starting down\n");
      var MoveY move with
        this.distance = 30 - _y();
      end;
      await move.ok;
      _printf("Qux done down\n");
    with
      var Halfplane guard with
        this.xcoeff = 0;
        this.ycoeff = 1;
        this.offset = 30;
      end;
      await guard.ok;
      _printf("Qux down disqualified\n");
    end
  else
    par/or do
      var Halfplane guard with
        this.xcoeff = 0;
        this.ycoeff = 1;
        this.offset = 29;
      end;
      await guard.ok;
      _printf("Qux down preempts\n");
    with
      var Quux default;
      await default.ok;
    end
  end
  emit this.ok;
end


class Bar with
  interface Executor;
do
  if _x() > 30 then
    par/or do
      _printf("Bar starting left\n");
      var MoveX move with
        this.distance = 30 - _x();
      end;
      await move.ok;
      _printf("Bar done left\n");
    with
      var Halfplane guard with
        this.xcoeff = 1;
        this.ycoeff = 0;
        this.offset = 31;
      end;
      await guard.ok;
      _printf("Bar left disqualified\n");
    end
  else
    par/or do
      var Halfplane guard with
        this.xcoeff = 1;
        this.ycoeff = 0;
        this.offset = 30;
      end;
      await guard.ok;
      _printf("Bar left preempts\n");
    with
      var Qux default;
      await default.ok;
    end
  end
  emit this.ok;
end

class Foo with
  interface Executor;
do
  if _x() < 30 then
    par/or do
      _printf("Foo right starts\n");
      var MoveX go_right with
        this.distance = 30 - _x();
      end;
      await go_right.ok;
      _printf("Foo right done\n");
    with
      var Halfplane guard with
        this.xcoeff = -1;
        this.ycoeff = 0;
        this.offset = -29;
      end;
      await guard.ok;
      _printf("Foo right disqualified\n");
    end
  else
    par/or do
      var Halfplane guard with
        this.xcoeff = 1;
        this.ycoeff = 0;
        this.offset = 30;
      end;
      await guard.ok;
      _printf("Foo right preempts\n");
    with
      var Bar default;
      await default.ok;
    end
  end
  emit this.ok;
end

class RulesTest with
  interface Executor;
do
  _printf("rulestest starting\n");
  loop do
    _printf("top of rulestest loop\n");
    if _x() == 30 and _y() == 30 then
      break;
    else
      var Foo body;
      await body.ok;
    end
  end
  _assert(_x() == 30);
  _assert(_y() == 30);
  _printf("rulestest done\n");
  emit this.ok;
end


await START;
// var BoxTest to_test;
// var DiagonalTest to_test;
var RulesTest to_test;
await to_test.ok;

escape 0;

#endif

#ifndef TEST_BEHAVIOR_TREE
#define TEST_BEHAVIOR_TREE

native _x();
native _y();
native _move_x();
native _move_y();

input void START;
input void X_DONE;
input void Y_DONE;

interface Executor with
  event void go;
  event void ok;
end

class MoveX with
  interface Executor;
  var int distance;
do
  await this.go;
  _printf("move x %d starting\n", this.distance);
  _move_x(this.distance);
  await X_DONE;
  _printf("move x %d done\n", this.distance);
  emit this.ok;
end

class MoveY with
  interface Executor;
  var int distance;
do
  await this.go;
  _printf("move y %d starting\n", this.distance);
  _move_y(this.distance);
  await Y_DONE;
  _printf("move y %d done\n", this.distance);
  emit this.ok;
end

class BoxTest with
  interface Executor;
do
  var MoveX right with
    this.distance = 10;
  end;
  var MoveY down with
    this.distance = 10;
  end;
  var MoveX left with
    this.distance = -10;
  end;
  var MoveY up with
    this.distance = -10;
  end;

  await this.go;
  _printf("boxtest starting\n");
  emit right.go;
  await right.ok;
  emit down.go;
  await down.ok;
  emit left.go;
  await left.ok;
  emit up.go;
  await up.ok;
  _printf("boxtest done\n");
  emit this.ok;
end;

class DiagonalTest with
  interface Executor;
do
  var MoveX right with
    this.distance = 20;
  end;
  var MoveY down with
    this.distance = 20;
  end;
  var MoveX left with
    this.distance = -20;
  end;
  var MoveY up with
    this.distance = -20;
  end;

  await this.go;
  _printf("diagonaltest starting\n");
  par/and do
    emit right.go;
    await right.ok;
  with
    emit down.go;
    await down.ok;
  end
  par/and do
    emit left.go;
    await left.ok;
  with
    emit up.go;
    await up.ok;
  end
  _printf("diagonaltest done\n");
  emit this.ok;
end

class RulesTest with
  interface Executor;
do
  var MoveX right with
    this.distance = 30;
  end;
  var MoveY down with
    this.distance = 30;
  end;
  var MoveX left with
    this.distance = -30;
  end;
  var MoveY up with
    this.distance = -30;
  end;

  await this.go;
  _printf("rulestest starting\n");
  loop do
    if _x() < 30 then
      emit right.go;
      await right.ok;
    else/if _x() > 30 then
      emit left.go;
      await left.ok;
    else/if _y() < 30 then
      emit down.go;
      await down.ok;
    else/if _y() > 30 then
      emit up.go;
      await up.ok;
    else
      break;
    end
  end
  _printf("rulestest done\n");
  emit this.ok;
end


// var BoxTest to_test;
// var DiagonalTest to_test;
var RulesTest to_test;
await START;
emit to_test.go;
await to_test.ok;

escape 0;

#endif
